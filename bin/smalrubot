#!/usr/bin/env ruby
require "pathname"
require "fileutils"

$options = {}
$options[:sketch_names] = []

def error(message)
  $stderr.puts "Error: " + message
  usage
end

def usage
  $stderr.puts "Usage: #{File.basename($0)} COMMAND [command-specific-options]"
  $stderr.puts
  $stderr.puts "Commands:"
  $stderr.puts "  generate-sketch SKETCH [options]"
  $stderr.puts
  $stderr.puts "    Sketches:"
  $stderr.puts "      sr"
  $stderr.puts "      sr_studu"
  $stderr.puts
  $stderr.puts "    Options:"
  $stderr.puts "      --baud BAUD"
  $stderr.puts "      --debug"
  $stderr.puts
  exit(2)
end

# Command must be the first argument.
$options[:command] = ARGV.shift
usage if !$options[:command] || $options[:command].match(/help/)

# Parse the rest loosely.
loop do
  case ARGV[0]
    when 'sr'
      $options[:sketch_names] << ARGV.shift
    when 'sr_studu'
      $options[:sketch_names] << ARGV.shift
    when '--baud'
      ARGV.shift; $options[:baud] = ARGV.shift
    when '--debug'
      ARGV.shift; $options[:debug] = true
    when /^-/
      error "Invalid argument '#{ARGV[0]}'"
    else break
  end
end

error "Invalid command '#{$options[:command]}'" unless $options[:command] == "generate-sketch"
error "No sketches or invalid sketches specified" if $options[:sketch_names].empty?

$options[:sketch_names].uniq.each do |sketch_name|
  # Define the sources.
  sketch_dir = sketch_name
  sketch_file = sketch_name + ".ino"
  src_dir = Pathname.new(__FILE__).realpath.to_s.chomp("/bin/smalrubot") + "/sketch"
  src_header = File.join src_dir, "lib", "Smalrubot.h"
  src_implementation = File.join src_dir, "lib", "Smalrubot.cpp"
  src_sketch = File.join src_dir, sketch_dir, sketch_file

  # Read the files.
  header = File.read(src_header)
  implementation = File.read(src_implementation)
  sketch = File.read(src_sketch)

  # Modify them based on the arguments.
  if $options[:baud]
    sketch.gsub! "19200", $options[:baud]
  end
  if $options[:debug]
    header.gsub! "// #define debug true", "#define debug true"
  end

  # Define the destinations.
  working_dir = Dir.pwd
  dest_dir = File.join working_dir, sketch_dir
  Dir::mkdir dest_dir
  dest_header = File.join dest_dir, "Smalrubot.h"
  dest_implementation = File.join dest_dir, "Smalrubot.cpp"
  dest_sketch = File.join dest_dir, sketch_file

  # Write the files.
  File.open(dest_header, 'w')         { |f| f.write header }
  File.open(dest_implementation, 'w') { |f| f.write implementation }
  File.open(dest_sketch, 'w')         { |f| f.write sketch }

  if sketch_name == 'sr_studu'
    %w(SrStuduino.cpp SrStuduino.h).each do |name|
      FileUtils.cp(File.join(src_dir, 'lib', name), File.join(dest_dir, name))
    end
  end
end
