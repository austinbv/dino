#!/usr/bin/env ruby
require "pathname"
require "fileutils"

SERIAL   = "du"
ETHERNET = "du_ethernet"
WIFI     = "du_wifi"

$options = {}
$options[:sketch_names] = []

def error(message)
  $stderr.puts "Error: " + message
  usage
end

def usage
  $stderr.puts "Usage: #{File.basename($0)} COMMAND [command-specific-options]"
  $stderr.puts
  $stderr.puts "Commands:"
  $stderr.puts "  generate-sketch SKETCH [options]"
  $stderr.puts
  $stderr.puts "    Available sketches and options:"
  $stderr.puts
  $stderr.puts "      serial"
  $stderr.puts "        --baud BAUD"
  $stderr.puts "        --debug"
  $stderr.puts
  $stderr.puts "      ethernet"
  $stderr.puts "        --mac XX:XX:XX:XX:XX:XX"
  $stderr.puts "        --ip XXX.XXX.XXX.XXX"
  $stderr.puts "        --port PORT"
  $stderr.puts "        --debug"
  $stderr.puts
  $stderr.puts "      wifi"
  $stderr.puts "        --ssid SSID"
  $stderr.puts "        --password PASSWORD"
  $stderr.puts "        --port PORT"
  $stderr.puts "        --debug"
  $stderr.puts
  exit(2)
end

# Command must be the first argument.
$options[:command] = ARGV.shift
usage if $options[:command].match /help|usage/ 

# Parse the rest loosely.
loop do
  case ARGV[0]
    when 'serial'
      ARGV.shift; $options[:sketch_names] << SERIAL unless $options[:sketch_names].include? SERIAL
    when 'ethernet'
      ARGV.shift; $options[:sketch_names] << ETHERNET unless $options[:sketch_names].include? ETHERNET
    when 'wifi'
      ARGV.shift; $options[:sketch_names] << WIFI unless $options[:sketch_names].include? WIFI
    when '--baud'
      ARGV.shift; $options[:baud] = ARGV.shift
    when '--mac'
      ARGV.shift; $options[:mac] = ARGV.shift
    when '--ip'
      ARGV.shift; $options[:ip] = ARGV.shift
    when '--ssid'
      ARGV.shift; $options[:ssid] = ARGV.shift
    when '--password'
      ARGV.shift; $options[:password] = ARGV.shift
    when '--port'
      ARGV.shift; $options[:port] = ARGV.shift
    when '--debug'
      ARGV.shift; $options[:debug] = true
    when /^-/
      error "Invalid argument '#{ARGV[0]}'"
    else break
  end
end

error "Invalid command '#{$options[:command]}'" unless $options[:command] == "generate-sketch"
error "No sketches or invalid sketches specified" if $options[:sketch_names].empty?

$options[:sketch_names].each do |sketch_name|
  # Define the sources.
  sketch_dir = sketch_name
  sketch_file = sketch_name + ".ino"
  src_dir = Pathname.new(__FILE__).realpath.to_s.chomp("/bin/dino") + "/src"
  src_header = File.join src_dir, "lib", "Dino.h"
  src_implementation = File.join src_dir, "lib", "Dino.cpp"
  src_sketch = File.join src_dir, sketch_dir, sketch_file

  # Read the files.
  header = File.read(src_header)
  implementation = File.read(src_implementation)
  sketch = File.read(src_sketch)

  # Modify them based on the arguments.
  if $options[:baud] && sketch_name == SERIAL
    sketch.gsub! "115200", $options[:baud]
  end
  if $options[:mac] && sketch_name == ETHERNET
    octets = $options[:mac].split(':')
    bytes = octets.map { |o| "0x#{o.upcase}" }
    sketch.gsub! "{ 0xDE, 0xAD, 0xBE, 0x30, 0x31, 0x32 }", bytes.inspect.gsub("[", "{").gsub("]", "}").gsub("\"", "")
  end
  if $options[:ip] && sketch_name == ETHERNET
    sketch.gsub! "192,168,0,77", $options[:ip].gsub(".", ",")
  end
  if $options[:ssid] && sketch_name == WIFI
    sketch.gsub! "yourNetwork", $options[:ssid]
  end
  if $options[:password] && sketch_name == WIFI
    sketch.gsub! "yourPassword", $options[:password]
  end
  if $options[:port]
    sketch.gsub! "int port = 3466", "int port = #{$options[:port]}"
  end
  if $options[:debug]
    header.gsub! "// #define debug true", "#define debug true"
  end

  # Define the destinations.
  working_dir = Dir.pwd
  dest_dir = File.join working_dir, sketch_dir
  Dir::mkdir dest_dir
  dest_header = File.join dest_dir, "Dino.h"
  dest_implementation = File.join dest_dir, "Dino.cpp"
  dest_sketch = File.join dest_dir, sketch_file

  # Write the files.
  File.open(dest_header, 'w')         { |f| f.write header }
  File.open(dest_implementation, 'w') { |f| f.write implementation }
  File.open(dest_sketch, 'w')         { |f| f.write sketch }
end